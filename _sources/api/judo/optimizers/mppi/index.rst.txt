judo.optimizers.mppi
====================

.. py:module:: judo.optimizers.mppi




Module Contents
---------------

.. py:class:: MPPIConfig

   Bases: :py:obj:`judo.optimizers.base.OptimizerConfig`


   
   Configuration for predictive sampling.

   .. py:attribute:: sigma
      :type:  float
      :value: 0.1



   .. py:attribute:: temperature
      :type:  float
      :value: 0.05



.. py:class:: MPPI(config: MPPIConfig, nu: int)

   Bases: :py:obj:`judo.optimizers.base.Optimizer`\ [\ :py:obj:`MPPIConfig`\ ]


   
   The MPPI optimizer.

   .. py:property:: sigma
      :type: float


      
      Get the sigma value.


   .. py:property:: temperature
      :type: float


      
      Get the temperature value.


   .. py:method:: sample_control_knots(nominal_knots: numpy.ndarray) -> numpy.ndarray

      
      Samples control knots given a nominal control input.

      MPPI adds fixed Gaussian noise to the nominal control input.

      :param nominal_knots: The nominal control input to sample from. Shape=(num_nodes, nu).

      :returns: *sampled_knots* -- The sampled control input. Shape=(num_rollouts, num_nodes, nu).


   .. py:method:: update_nominal_knots(sampled_knots: numpy.ndarray, rewards: numpy.ndarray) -> numpy.ndarray

      
      Update the nominal control knots based on the sampled controls and rewards.

      MPPI uses a weighted average of the sampled controls based on the rewards.

      :param sampled_knots: The sampled control input. Shape=(num_rollouts, num_nodes, nu).
      :param rewards: The rewards for each sampled control input. Shape=(num_rollouts,).

      :returns: *nominal_knots* -- The updated nominal control input. Shape=(num_nodes, nu).


